"use strict";
// Copyright DataStax, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Connection = void 0;
const client_1 = require("../collections/client");
const collection_1 = require("./collection");
const connection_1 = __importDefault(require("mongoose/lib/connection"));
const mongoose_1 = require("mongoose");
const utils_1 = require("../collections/utils");
class Connection extends connection_1.default {
    constructor(base) {
        super(base);
        this.debugType = 'StargateMongooseConnection';
        this.initialConnection = null;
    }
    _waitForClient() {
        return new Promise((resolve, reject) => {
            const shouldWaitForClient = (this.readyState === mongoose_1.STATES.connecting || this.readyState === mongoose_1.STATES.disconnected) && this._shouldBufferCommands();
            if (shouldWaitForClient) {
                this._queue.push({ fn: resolve });
            }
            else if (this.readyState === mongoose_1.STATES.disconnected && this.db == null) {
                reject(new Error('Connection is disconnected'));
            }
            else {
                resolve();
            }
        });
    }
    collection(name, options) {
        if (!(name in this.collections)) {
            this.collections[name] = new collection_1.Collection(name, this, options);
        }
        return super.collection(name, options);
    }
    async createCollection(name, options) {
        return (0, utils_1.executeOperation)(async () => {
            await this._waitForClient();
            const db = this.client.db();
            if (!this.client.httpClient.isAstra) {
                db.createDatabase();
            }
            return db.createCollection(name, options);
        });
    }
    async dropCollection(name) {
        return (0, utils_1.executeOperation)(async () => {
            await this._waitForClient();
            const db = this.client.db();
            return db.dropCollection(name);
        });
    }
    async dropDatabase() {
        return (0, utils_1.executeOperation)(async () => {
            await this._waitForClient();
            const db = this.client.db();
            return db.dropDatabase();
        });
    }
    async listCollections(options) {
        return (0, utils_1.executeOperation)(async () => {
            await this._waitForClient();
            const db = this.client.db();
            const res = await db.findCollections(options);
            const collections = res?.status?.collections ?? [];
            return collections.map((collection) => {
                if (typeof collection === 'string') {
                    return { name: collection };
                }
                return collection;
            });
        });
    }
    async listDatabases() {
        return (0, utils_1.executeOperation)(async () => {
            await this._waitForClient();
            const { status } = await this.client.findNamespaces();
            return { databases: status.namespaces };
        });
    }
    async runCommand(command) {
        return (0, utils_1.executeOperation)(async () => {
            await this._waitForClient();
            const db = this.client.db();
            return db.runCommand(command);
        });
    }
    async openUri(uri, options) {
        let _fireAndForget = false;
        if (options && '_fireAndForget' in options) {
            _fireAndForget = options._fireAndForget;
            delete options._fireAndForget;
        }
        // Set Mongoose-specific config options. Need to set
        // this in order to allow connection-level overrides for
        // these options.
        this.config = {
            autoCreate: options?.autoCreate,
            autoIndex: options?.autoIndex,
            sanitizeFilter: options?.sanitizeFilter,
            bufferCommands: options?.bufferCommands
        };
        for (const model of Object.values(this.models)) {
            // @ts-ignore
            model.init().catch(() => { });
        }
        this.initialConnection = this.createClient(uri, options)
            .then(() => this)
            .catch(err => {
            this.readyState = mongoose_1.STATES.disconnected;
            throw err;
        });
        if (_fireAndForget) {
            return this;
        }
        await this.initialConnection;
        return this;
    }
    async createClient(uri, options) {
        this._connectionString = uri;
        this._closeCalled = false;
        this.readyState = mongoose_1.STATES.connecting;
        const client = await client_1.Client.connect(uri, options);
        this.client = client;
        this.db = client.db();
        this.readyState = mongoose_1.STATES.connected;
        this.onOpen();
        return this;
    }
    setClient(client) {
        this.client = client;
        this.db = client.db();
    }
    asPromise() {
        return this.initialConnection;
    }
    /**
     *
     * @returns Client
     */
    doClose(_force) {
        if (this.client != null) {
            this.client.close();
        }
        return this;
    }
}
exports.Connection = Connection;
//# sourceMappingURL=connection.js.map