import { Db } from './db';
import { FindCursor } from './cursor';
import { InsertManyResult } from 'mongoose';
import { DeleteOneOptions, FindOneAndDeleteOptions, FindOneAndReplaceOptions, FindOneAndUpdateOptions, FindOneOptions, InsertManyOptions, UpdateManyOptions, UpdateOneOptions, FindOptions } from './options';
export interface DataAPIUpdateResult {
    matchedCount: number;
    modifiedCount: number;
    acknowledged: boolean;
    upsertedId?: any;
    upsertedCount?: number;
}
export interface DataAPIDeleteResult {
    acknowledged: boolean;
    deletedCount: number;
}
export interface DataAPIInsertOneResult {
    acknowledged: boolean;
    insertedId: any;
}
export interface DataAPIModifyResult {
    ok: number;
    value: Record<string, any> | null;
}
export type DataAPIInsertManyResult = InsertManyResult<any> & {
    documentResponses?: {
        _id: unknown;
        status: string;
        errorsIdx?: number;
    };
};
export declare class Collection {
    httpClient: any;
    name: string;
    httpBasePath: string;
    collectionName: string;
    constructor(db: Db, name: string);
    insertOne(document: Record<string, any>): Promise<any>;
    insertMany(documents: Record<string, any>[], options?: InsertManyOptions): Promise<any>;
    updateOne(filter: Record<string, any>, update: Record<string, any>, options?: UpdateOneOptions): Promise<any>;
    updateMany(filter: Record<string, any>, update: Record<string, any>, options?: UpdateManyOptions): Promise<any>;
    deleteOne(filter: Record<string, any>, options?: DeleteOneOptions): Promise<DataAPIDeleteResult>;
    deleteMany(filter: Record<string, any>): Promise<DataAPIDeleteResult>;
    find(filter: Record<string, any>, options?: FindOptions): FindCursor;
    findOne(filter: Record<string, any>, options?: FindOneOptions): Promise<Record<string, any> | null>;
    findOneAndReplace(filter: Record<string, any>, replacement: Record<string, any>, options?: FindOneAndReplaceOptions): Promise<DataAPIModifyResult>;
    distinct(_key: any, _filter: any, _options?: any): Promise<void>;
    countDocuments(filter?: Record<string, any>): Promise<number>;
    estimatedDocumentCount(): Promise<number>;
    findOneAndDelete(filter: Record<string, any>, options?: FindOneAndDeleteOptions): Promise<DataAPIModifyResult>;
    /**
   * @deprecated
   */
    count(filter?: Record<string, any>): Promise<number>;
    findOneAndUpdate(filter: Record<string, any>, update: Record<string, any>, options?: FindOneAndUpdateOptions): Promise<DataAPIModifyResult>;
    runCommand(command: Record<string, any>): Promise<any>;
}
export declare class StargateMongooseError extends Error {
    command: Record<string, any>;
    constructor(message: any, command: Record<string, any>);
}
